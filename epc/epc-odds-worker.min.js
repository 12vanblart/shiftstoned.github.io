/*  https://github.com/matt-kimball/epc  */
WorkerGlobalScope.DIST = 1;
"use strict";function each(list,func){var index;for(index=0;index<list.length;index+=1){func(index,list[index])}}function factorialSlow(n){var i,r;r=1;for(i=n;i>1;i-=1){r=r*i}return r}var factorialLookup={};function buildFactorialLookup(){var i;for(i=0;i<100;i+=1){factorialLookup[i]=factorialSlow(i)}}buildFactorialLookup();function factorial(n){if(n<100){return factorialLookup[n]}return factorialSlow(n)}function binomial(n,k){if(k>n){return 0}return factorial(n)/factorial(k)/factorial(n-k)}function makeInfluence(influenceString){var i,chr,digit,influence={power:0,fire:0,justice:0,primal:0,shadow:0,time:0,wild:0};for(i=0;i<influenceString.length;i+=1){chr=influenceString[i];if(chr.charCodeAt(0)>="0".charCodeAt(0)&&chr.charCodeAt(0)<="9".charCodeAt(0)){digit=Number(chr);if(influence.power>0){influence.power=influence.power*10+digit}else{influence.power=digit}}else if(chr==="F"){influence.fire+=1}else if(chr==="J"){influence.justice+=1}else if(chr==="P"){influence.primal+=1}else if(chr==="S"){influence.shadow+=1}else if(chr==="T"){influence.time+=1}else if(chr==="X"){influence.wild+=1}else{influence.makeError='Invalid influence: "'+influenceString+'"'}}influence.zero=function(){influence.power=0;influence.fire=0;influence.justice=0;influence.primal=0;influence.time=0;influence.shadow=0;influence.wild=0};influence.isEmpty=function(){if(influence.power>0){return false}if(influence.fire>0||influence.justice>0||influence.primal>0||influence.time>0||influence.shadow>0||influence.wild>0){return false}return true};influence.toString=function(){var str;if(influence.power>0){str=String(influence.power)}else{str=""}str=str+"F".repeat(influence.fire);str=str+"T".repeat(influence.time);str=str+"J".repeat(influence.justice);str=str+"P".repeat(influence.primal);str=str+"S".repeat(influence.shadow);str=str+"X".repeat(influence.wild);return str};influence.relevantTo=function(target){if(influence.power>0&&target.power>0){return true}if(influence.fire>0&&target.fire>0){return true}if(influence.justice>0&&target.justice>0){return true}if(influence.primal>0&&target.primal>0){return true}if(influence.shadow>0&&target.shadow>0){return true}if(influence.time>0&&target.time>0){return true}if(influence.wild>0){if(target.fire>0||target.justice>0||target.primal>0||target.shadow>0||target.time>0){return true}}return false};influence.add=function(count,other){influence.power+=count*other.power;influence.fire+=count*other.fire;influence.justice+=count*other.justice;influence.primal+=count*other.primal;influence.shadow+=count*other.shadow;influence.time+=count*other.time;influence.wild+=count*other.wild};influence.mask=function(target){var masked=makeInfluence("");if(target.power>0){masked.power=influence.power}if(target.fire>0){masked.fire=influence.fire}if(target.justice>0){masked.justice=influence.justice}if(target.primal>0){masked.primal=influence.primal}if(target.shadow>0){masked.shadow=influence.shadow}if(target.time>0){masked.time=influence.time}if(target.fire>0||target.justice>0||target.primal>0||target.shadow>0||target.time>0||target.wild>0){masked.wild=influence.wild}return masked};influence.equals=function(other){return other.power===influence.power&&other.fire===influence.fire&&other.justice===influence.justice&&other.primal===influence.primal&&other.shadow===influence.shadow&&other.time===influence.time&&other.wild===influence.wild};influence.compare=function(other){if(influence.power!==other.power){return influence.power-other.power}if(influence.fire!==other.fire){return influence.fire-other.fire}if(influence.time!==other.time){return influence.time-other.time}if(influence.justice!==other.justice){return influence.justice-other.justice}if(influence.primal!==other.primal){return influence.primal-other.primal}if(influence.shadow!==other.shadow){return influence.shadow-other.shadow}if(influence.wild!==other.wild){return influence.wild-other.wild}return 0};influence.satisfies=function(target){var unsatisfied=0;if(influence.power<target.power){return false}if(influence.fire<target.fire){unsatisfied+=target.fire-influence.fire}if(influence.justice<target.justice){unsatisfied+=target.justice-influence.justice}if(influence.primal<target.primal){unsatisfied+=target.primal-influence.primal}if(influence.shadow<target.shadow){unsatisfied+=target.shadow-influence.shadow}if(influence.time<target.time){unsatisfied+=target.time-influence.time}if(influence.wild<unsatisfied){return false}return true};return influence}function makeEternalCardInfo(id,name,influenceGenerated,influenceRequired){var card={id:id,name:name,influenceRequirements:[]};card.influenceGenerated=makeInfluence(influenceGenerated);if(card.influenceGenerated&&card.influenceGenerated.makeError){card.makeError=card.influenceGenerated.makeError}each(influenceRequired.split(","),function(index,str){var influence=makeInfluence(str);if(influence){if(influence.makeError){card.makeError=influence.makeError}else if(!influence.isEmpty()){card.influenceRequirements.push(influence)}}});return card}function makeEternalCardLibrary(cards){var library={cardlist:cards,cards:{}};function addCardInfo(line){var re,match,card,id,name,influenceGenerated,influenceRequired;line=line.trim();if(line.length<=0){return}re=/(Set[0-9]+ #[0-9]+);([^;]*);([^;]*);([^;]*);([^;]*)/;match=line.match(re);if(!match){library.makeError='Invalid card info: "'+line+'"';return}id=match[1];influenceGenerated=match[2].trim();influenceRequired=match[3].trim();name=match[4].trim();card=makeEternalCardInfo(id,name,influenceGenerated,influenceRequired);if(card.makeError){library.makeError=card.makeError+' in "'+line+'"'}library.cards[id]=card}each(cards.split("\n"),function(index,line){if(library.makeError){return library}addCardInfo(line)});return library}function makeDrawCombinationIterator(deck,cardGroups,maxCards,influence){var iter,workingInfluence;iter={cardGroups:cardGroups,cardGroupCount:[],cardGroupInfluence:[],current:[],done:false};workingInfluence=makeInfluence("");function incrementCurrent(){var index,count;index=iter.current.length-1;while(index>=0){count=iter.cardGroupCount[index];iter.current[index]+=1;if(iter.current[index]<=count){return}iter.current[index]=0;index-=1}iter.done=true}function drawSatisfiesInfluence(){var i,groupInfluence,count;workingInfluence.zero();for(i=0;i<cardGroups.length;i+=1){groupInfluence=iter.cardGroupInfluence[i];count=iter.current[i];workingInfluence.add(count,groupInfluence)}return workingInfluence.satisfies(influence)}function currentCount(){var i,count;count=0;for(i=0;i<cardGroups.length;i+=1){count+=iter.current[i]}return count}iter.next=function(){while(!iter.done){incrementCurrent();if(currentCount()<=maxCards&&drawSatisfiesInfluence()){break}}if(iter.done){return{done:true}}return{value:iter.current.slice(),done:false}};each(cardGroups,function(index,value){var groupInfluence,count;iter.current.push(0);count=0;each(cardGroups[index],function(cardIndex,card){groupInfluence=card.influenceGenerated;count+=deck.cardCount[card.id]});iter.cardGroupCount.push(count);iter.cardGroupInfluence.push(groupInfluence)});return iter}function makeEternalDeck(cardlibrary,inCardlist){var deck,cardlist;function mergeCardlist(inCardlist){var ret,cardcountId;ret=[];cardcountId={};each(inCardlist,function(index,cardcount){var dupCardcount;dupCardcount=cardcountId[cardcount.id];if(dupCardcount){dupCardcount.count+=cardcount.count}else{dupCardcount={id:cardcount.id,name:cardcount.name,count:cardcount.count};ret.push(dupCardcount);cardcountId[cardcount.id]=dupCardcount}});return ret}cardlist=mergeCardlist(inCardlist);deck={cardlibrary:cardlibrary,cardlist:cardlist,cards:[],cardNames:{},cardCount:{}};function addCardCount(cardcount){var cardid,card,count,i;cardid=cardcount.id;card=cardlibrary.cards[cardid];if(!card){deck.makeError='unknown card: "'+cardid+'"';return}for(i=0;i<cardcount.count;i+=1){deck.cards.push(card)}deck.cardNames[cardid]=cardcount.name;count=cardcount.count;if(deck.cardCount[cardid]){count+=deck.cardCount[cardid]}deck.cardCount[cardid]=count}deck.listInfluenceRequirements=function(){var influenceDict,influenceList,cards;cards=deck.cards.slice();cards.sort(function(a,b){var infA,infB,powerDiff;infA=a.influenceRequirements[0];infB=b.influenceRequirements[0];if(!infA&&!infB){return a.id.localeCompare(b.id)}if(!infA){return-1}if(!infB){return 1}powerDiff=infA.power-infB.power;if(powerDiff){return powerDiff}return a.id.localeCompare(b.id)});influenceList=[];influenceDict={};each(cards,function(index,card){each(card.influenceRequirements,function(index,influence){var influenceStr,influencePair;influenceStr=influence.toString();influencePair=influenceDict[influenceStr];if(influencePair){influencePair[1].push(card);return}influencePair=[influence,[card]];influenceList.push(influencePair);influenceDict[influenceStr]=influencePair})});influenceList.sort(function(a,b){var infA,infB,infCompare,lowIdA,lowIdB;infA=a[0];infB=b[0];infCompare=infA.compare(infB);if(infCompare){return infCompare}lowIdA=a[1][0].id;lowIdB=b[1][0].id;each(a[1],function(index,card){if(card.id.localeCompare(lowIdA)<0){lowIdA=card.id}});each(b[1],function(index,card){if(card.id.localeCompare(lowIdB)<0){lowIdB=card.id}});return lowIdA.localeCompare(lowIdB)});return influenceList};function listDrawCombinations(influence,maxCards){var relevantCards,cardGroups;relevantCards=[];each(Object.getOwnPropertyNames(deck.cardCount),function(index,id){var card;card=deck.cardlibrary.cards[id];if(card.influenceGenerated&&card.influenceGenerated.relevantTo(influence)){relevantCards.push(card)}});cardGroups=[];each(relevantCards,function(index,card){var foundGroup=false;each(cardGroups,function(index,group){var groupCard,groupInfluence,cardInfluence;if(foundGroup){return}groupCard=group[0];groupInfluence=groupCard.influenceGenerated.mask(influence);cardInfluence=card.influenceGenerated.mask(influence);if(groupInfluence.equals(cardInfluence)){group.push(card);foundGroup=true}});if(!foundGroup){cardGroups.push([card])}});return makeDrawCombinationIterator(deck,cardGroups,maxCards,influence)}function oddsForCombination(cardGroupCount,combination,drawCount){var odds,count,totalMatch,totalDeckMatch,deckCount,i;odds=1;totalMatch=0;totalDeckMatch=0;for(i=0;i<combination.length;i+=1){count=combination[i];deckCount=cardGroupCount[i];odds=odds*binomial(deckCount,count);totalDeckMatch+=deckCount;totalMatch+=count}odds=odds*binomial(deck.cards.length-totalDeckMatch,drawCount-totalMatch);odds=odds/binomial(deck.cards.length,drawCount);return odds}function gatherTotalInfluence(){var influence;influence=makeInfluence("");each(deck.cards,function(index,card){if(card.influenceGenerated){influence.add(1,card.influenceGenerated)}});return influence}deck.drawOdds=function(drawCount,influence){var drawCombinations,combinationIter,odds;if(drawCount>=deck.cards.length){if(gatherTotalInfluence().satisfies(influence)){return 1}return 0}drawCombinations=listDrawCombinations(influence,drawCount);odds=0;while(true){combinationIter=drawCombinations.next();if(combinationIter.done){break}odds=odds+oddsForCombination(drawCombinations.cardGroupCount,combinationIter.value,drawCount)}return odds};deck.listPowerInfluenceSources=function(){var ret,used;ret=[];used={};each(deck.cards,function(index,card){var influence;if(used[card.id]){return}influence=card.influenceGenerated;if(!influence.isEmpty()){ret.push(card)}used[card.id]=true});return ret};deck.generateDecklist=function(forExport){var decklist;decklist="";each(deck.cardlist,function(index,cardcount){var cardline;if(!cardcount.count&&forExport){return}cardline=String(cardcount.count)+" "+cardcount.name+" ("+cardcount.id+")";decklist+=cardline+"\n"});return decklist};each(cardlist,function(index,cardcount){addCardCount(cardcount)});return deck}function makeEternalDeckFromString(library,deckstr){var deck,cardcounts,makeError;cardcounts=[];each(deckstr.split("\n"),function(index,line){var re,match,count,name,cardid;line=line.trim();if(line.length<=0){return}re=/^([0-9]+) (.+) \((Set[0-9]+ #[0-9]+)\)$/;match=line.match(re);if(!match){makeError='malformed line: "'+line+'"';return}count=Number(match[1]);name=match[2];cardid=match[3];if(count>100){makeError='too many cards: "'+line+'"';return}cardcounts.push({id:cardid,name:name,count:count})});deck=makeEternalDeck(library,cardcounts);if(makeError){deck.makeError=makeError}return deck}"use strict";var onmessage;if(!WorkerGlobalScope.DIST){importScripts("epc-deck.js")}function computeOdds(deck,minDraws,maxDraws){var drawCount,influenceCards,oddsValues,influence,odds,oddsRow;influenceCards=deck.listInfluenceRequirements();oddsValues=[];each(influenceCards,function(index,influenceCard){influence=influenceCard[0];oddsRow=[];for(drawCount=minDraws;drawCount<=maxDraws;drawCount+=1){odds=deck.drawOdds(drawCount,influence);oddsRow.push(odds)}oddsValues.push({power:influence.power,odds:oddsRow})});return oddsValues}onmessage=function(event){var param,library,deck,odds;param=event.data;library=makeEternalCardLibrary(param.cardlist);deck=makeEternalDeckFromString(library,param.decklist);odds=computeOdds(deck,param.minDraws,param.maxDraws);postMessage(odds)};